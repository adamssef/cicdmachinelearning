<?php

/**
 * @file
 * Custom hooks functions for Planet Core.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\TranslatableInterface;
use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;


class SpecialTemplates {
  const ACCEPT_PAYMENTS = 5621;
  const CUSTOMER_RESOURCES = 3091;
  const GETTING_STARTED = 3791;
  const EBOOKS = 2136;
  const PROTEL_IMPRINT = 4286;
  const HTML_SITEMAP = 4716;
  const CASE_STUDIES = 5231;
  const PRESS_FRONT = 4751;
  const PRESS_ARCHIVE = 4756;

  public static function getAll(): array {
      return [
          self::ACCEPT_PAYMENTS,
          self::CUSTOMER_RESOURCES,
          self::GETTING_STARTED,
          self::EBOOKS,
          self::PROTEL_IMPRINT,
          self::HTML_SITEMAP,
          self::CASE_STUDIES,
          self::PRESS_FRONT,
          self::PRESS_ARCHIVE
      ];
  }
}

function _planet_core_sanitize_cookie($value)
{
  return htmlspecialchars($value);
}

/**
 * Implements hook_preprocess_html().
 *
 * Changes the title of the user page.
 */
function planet_core_preprocess_html(&$variables): void
{
  $routeName = \Drupal::routeMatch()->getRouteName();
  if ($routeName === 'entity.user.canonical') {
    $variables['head_title']['title'] = '';
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  if ($current_path_alias === '/pms-transformation') {
    $variables['attributes']['class'][] = 'planet-header-transparent';
  }

  // Adds to a body css class that identifies the current page.
  $value_to_be_used = $current_path_alias ?? $current_path;
  $value_to_be_used = ltrim($value_to_be_used, '/');
  $value_to_be_used = str_replace('/', '-', $value_to_be_used);
  $value_to_be_used = str_replace('_', '-', $value_to_be_used);

  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof Node) {
    $url_alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

    if (str_starts_with($url_alias, '/blog/')) {
      $blog_value_to_be_used = 'blog-page';
      $variables['attributes']['class'][] = 'plnt-css-' . $blog_value_to_be_used;
    }
  }

  $variables['attributes']['class'][] = 'plnt-css-' . $value_to_be_used;

  // For admin pages we need to add a class to the body tag.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $variables['attributes']['class'][] = 'plnt-css-admin-page';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function planet_core_webform_submission_presave(WebformSubmissionInterface $webform_submission): void
{
  $webform = $webform_submission->getWebform();
  $webform_id = $webform->id();

  // Check for the variables to send the UTMs to the form.
  $cookie_utm_source = isset($_COOKIE['Drupal_visitor_utm_source']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_source']) : '';
  $cookie_utm_medium = isset($_COOKIE['Drupal_visitor_utm_medium']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_medium']) : '';
  $cookie_utm_campaign = isset($_COOKIE['Drupal_visitor_utm_campaign']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_campaign']) : '';
  $cookie_utm_term = isset($_COOKIE['Drupal_visitor_utm_term']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_term']) : '';
  $cookie_utm_content = isset($_COOKIE['Drupal_visitor_utm_content']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_content']) : '';
  $cookie_orig_utm_source = isset($_COOKIE['Drupal_visitor_orig_utm_source']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_source']) : '';
  $cookie_orig_utm_medium = isset($_COOKIE['Drupal_visitor_orig_utm_medium']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_medium']) : '';
  $cookie_orig_utm_campaign = isset($_COOKIE['Drupal_visitor_orig_utm_campaign']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_campaign']) : '';
  $cookie_orig_utm_term = isset($_COOKIE['Drupal_visitor_orig_utm_term']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_term']) : '';
  $cookie_orig_utm_content = isset($_COOKIE['Drupal_visitor_orig_utm_content']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_content']) : '';
  $cookie_gclid = isset($_COOKIE['Drupal_visitor_gclid']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_gclid']) : '';
  $cookie_referrer = isset($_COOKIE['Drupal_visitor_referrer']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_referrer']) : '';
  $cookie_orig_lp = isset($_COOKIE['Drupal_visitor_orig_lp']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_lp']) : '';

  if ($cookie_utm_source) {
    $webform_submission->setElementData('utm_source', $cookie_utm_source);
  }

  if ($cookie_utm_medium) {
    $webform_submission->setElementData('utm_medium', $cookie_utm_medium);
  }

  if ($cookie_utm_campaign) {
    $webform_submission->setElementData('utm_campaign', $cookie_utm_campaign);
  }

  if ($cookie_utm_content) {
    $webform_submission->setElementData('utm_content', $cookie_utm_content);
  }

  if ($cookie_utm_term) {
    $webform_submission->setElementData('utm_term', $cookie_utm_term);
  }

  if ($cookie_gclid) {
    $webform_submission->setElementData('gclid', $cookie_gclid);
  }


  if ($cookie_orig_utm_source) {
    $webform_submission->setElementData('orig_utm_source', $cookie_orig_utm_source);
  }

  if ($cookie_orig_utm_medium) {
    $webform_submission->setElementData('orig_utm_medium', $cookie_orig_utm_medium);
  }

  if ($cookie_orig_utm_campaign) {
    $webform_submission->setElementData('orig_utm_campaign', $cookie_orig_utm_campaign);
  }

  if ($cookie_orig_utm_content) {
    $webform_submission->setElementData('orig_utm_content', $cookie_orig_utm_content);
  }

  if ($cookie_orig_utm_term) {
    $webform_submission->setElementData('orig_utm_term', $cookie_orig_utm_term);
  }

  if ($cookie_referrer) {
    $webform_submission->setElementData('referrer', $cookie_referrer);
  }

  if ($cookie_orig_lp) {
    $webform_submission->setElementData('orig_lp', $cookie_orig_lp);
  }

  /** SUPPORT FORM - temporary */
  if ($webform_id === 'support') {
    // Populate the value of 'Support_Address__c' with the same value as 'email'.
    // Need it in order to have Salesforce to send an e-mail.
    $email = $webform_submission->getElementData('email');
    $webform_submission->setElementData('support_address__c', $email);
  }
}


/**
 * Implements hook_form_views_exposed_form_alter().
 *
 * Creates region/country dependent filter.
 */
function planet_core_form_views_exposed_form_alter(&$form, &$form_state): void
{
  if ($form['#id'] === 'views-exposed-form-companies-registered-companies') {
    unset($form['region']['#options']['All']);

    $regions = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('regions');
    if ($region = reset($regions)) {
      $form['region']['#default_value'] = $region->tid;
    }

    $input = $form_state->getUserInput();
    $selectedRegion = $input['region'];
    if ($selectedRegion === 'All') {
      $selectedRegion = array_key_first($form['region']['#options']);
    }

    $countries = _planet_core_get_associative_countries_with_region($selectedRegion);
    $form['country']['#options'] = $countries;

    $form['#attached']['library'][] = 'planet_sitestudio_custom_elements/registeredCompanies';
  }
}

function planet_core_views_pre_render(ViewExecutable $view)
{
  $initial_count = count($view->result);

  if ($view->id() === "email_contacts_terms" && $view->current_display === "block_3") {
    $altered_view = Views::getView('email_contacts_terms');
    $altered_view->setDisplay('block_3');
    $altered_view->execute();

    if ($initial_count < count($altered_view->result)) {
      $view->result = $altered_view->result;
    }
  }

}

/**
 * Implements hook_views_query_alter().
 */
function planet_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query)
{
  $node = \Drupal::routeMatch()->getParameter('node');
  $collected_tags = [];

  if ($view->current_display === 'blog_more_reads') {
    if ($node !== NULL && $node->hasField('field_resources_tags')) {
      $node_id = $node->id();

      $temp_query = \Drupal::database()->select('node__field_resources_tags', 'nrt')
        ->fields('nrt', ['field_resources_tags_target_id'])
        ->condition('nrt.entity_id', $node_id, '=')
        ->execute();

      $res = $temp_query->fetchAll();
      $collected_tags = array_column($res, 'field_resources_tags_target_id');
    }

    if (!empty($collected_tags)) {
      $query->addWhere(0, 'node__field_resources_tags.field_resources_tags_target_id', $collected_tags, 'IN');
    } else {
      foreach ($query->where as $key => $conditionGroup) {
        if ($conditionGroup['type'] === 'AND') {
          foreach ($conditionGroup['conditions'] as $condition_group_key => $condition) {
            if ($condition['field'] === 'node__field_resources_tags.field_resources_tags_target_id IN(:node__field_resources_tags_field_resources_tags_target_id[])') {
              unset($query->where[$key]['conditions'][$condition_group_key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function planet_core_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if ($form_id === 'entity_clone_form') {
    if (isset($form['description'])) {
      $form['description']['#access'] = FALSE;
    }

    if (isset($form['recursive'])) {
      foreach ($form['recursive'] as $key => $value) {
        if ($key === '#tree') {
          continue;
        } else {
          $form['recursive'][$key]['#access'] = FALSE;
          $form['recursive'][$key]['#description_should_be_shown'] = FALSE;
        }
      }
    }
  }
}

/**
 * Gets countries associated with the region.
 */
function _planet_core_get_associative_countries_with_region(string $regionId): array
{
  $countries = [];
  $countries['All'] = 'All';
  $vid = 'countries';

  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0, NULL, TRUE);
  if ($regionId != 'All') {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => $vid,
      'field_region' => $regionId,
    ]);
  }

  foreach ($terms as $term) {
    $countries[$term->id()] = $term->label();
  }

  return $countries;
}

/**
 * Implements hook_node_access().
 */
function planet_core_node_access(NodeInterface $node, $op, AccountInterface $account)
{
  if ($account->isAnonymous() && $node->gettype() == 'webform') {
    return AccessResult::forbidden()->cachePerPermissions();
  }

  return AccessResult::neutral()->cachePerPermissions();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function planet_core_preprocess_field(&$variables)
{
  if ($variables['field_name'] === 'field_resources_tags' && $variables['element']['#bundle'] === 'page') {
    $variables['attributes']['class'][] = 'tags-hidden-for-page-node';
  }
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function planet_core_preprocess_node__author(&$variables)
{
  // Get the last 5 article titles.
  $node = $variables['node'];

  // Get the NID (node ID) of the Author node.
  $node_id = $node->id();

  $planet_core_service = \Drupal::service('planet_core.article_helper');

  $author_data = $planet_core_service->getAuthorArticles($node_id);

  // Pass the titles to the template.
  $variables['author_data'] = $author_data;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() to suggest a custom template for a specific node.
 */
function planet_core_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!$node || !($node instanceof \Drupal\node\NodeInterface) || (\Drupal::currentUser()->isAuthenticated())) {
    return;
  }

  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

  switch ($alias) {
    case "/customer-resources":
      $suggestions[] = 'onboarding_page_template';
      break;
  }
}

/**
 * Implements hook_cron().
 */
function planet_core_cron()
{
  // Calculate the timestamp for 30 days ago.
  $thirtyDaysAgo = new DrupalDateTime('-30 days');
  $thirtyDaysAgoTimestamp = $thirtyDaysAgo->getTimestamp();

  // Load entity storage for pardot_submission.
  $entityTypeManager = \Drupal::entityTypeManager();
  $storage = $entityTypeManager->getStorage('pardot_submission');

  // Query for pardot_submission entities older than 30 days.
  $query = $storage->getQuery()
    ->condition('changed', $thirtyDaysAgoTimestamp, '<')
    ->accessCheck();
  $entity_ids = $query->execute();

  if (empty($entity_ids)) {
    \Drupal::logger('planet_core')->notice('No Pardot Submission to clean.');
    \Drupal::messenger()->addMessage('No Pardot Submission to clean.');
    return;
  }

  // Load and delete each entity.
  foreach ($entity_ids as $entity_id) {
    $entity = $storage->load($entity_id);
    if ($entity) {
      $entity->delete();
    }
  }

  \Drupal::logger('planet_core')->notice('Pardot Submission cleanup cron has been executed.');
  \Drupal::messenger()->addMessage('Pardot Submission cleanup cron has been executed.');
}



/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function planet_core_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables)
{
  if ($variables['view']->id() === 'ebook') {

    if ($variables['field']->getPluginId() === 'entity_link') {
      $suggestions[] = 'views_view_field__ebook_link';
    }
  }

}

/**
 * Implements hook_preprocess_HOOK() for views_view_field templates.
 */
function planet_core_preprocess_views_view_field(array &$variables)
{
  $this_page_node = \Drupal::routeMatch()->getParameter('node');

  if ($this_page_node) {
    $node_type = $this_page_node->getType();
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $text = strip_tags($variables['output']);
    $old_output = $variables['output'];

    if ($node_type && $node_type === 'page') {
      if ($text === "Read full case study") {
        switch ($langcode) {
          case 'de':
            $variables['output'] = ['#markup' => str_replace($text, 'Fallstudie lesen', $old_output)];
            break;
          case 'fr':
            $variables['output'] = ['#markup' => str_replace($text, 'Lire l\'étude de cas complète', $old_output)];
            break;
          case 'it':
            $variables['output'] = ['#markup' => str_replace($text, 'Leggi il case study completo', $old_output)];
            break;
          case 'es':
            $variables['output'] = ['#markup' => str_replace($text, 'Leer el caso de éxito completo', $old_output)];
            break;
        }
      }
    }
  }

  if ($variables['view']->id() === 'ebook') {
    if ($variables['field']->getPluginId() === 'entity_link') {
      $node_translation = \Drupal::service('entity.repository')->getTranslationFromContext($variables['row']->_entity);
      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node_translation->id(), $lang);

      if ($lang !== 'en') {
        $link = "/$lang" . $alias;
      } else {
        $link = $alias;
      }

      $variables['link'] = $link;
    }
  }
}

/**
 * Implements hook_theme().
 */
function planet_core_theme($existing, $type, $theme, $path): array
{
  return [
    'views_view_fields__case_studies__featured_slider' => [
      'template' => 'views-view-fields--case-studies--featured-slider',
      'render element' => 'elements',
      'base hook' => 'views_view',
    ],
    'views_view_fields__case_studies__featured_block' => [
      'template' => 'views-view-fields--case-studies--featured-block',
      'render element' => 'elements',
      'base hook' => 'views_view',
    ],
    'paragraph__right_side_mega_menu' => [
      'template' => 'paragraph--right-side-mega-menu',
      'base hook' => 'paragraph',
    ],
    'node__author' => [
      'template' => 'node--author',
      'base hook' => 'node'
    ],
    'node__sitemap' => [
      'template' => 'node--sitemap',
      'base hook' => 'node',
    ],
    'onboarding_page_template' => [
      'template' => 'page--onboarding-page-template',
      'base hook' => 'page',
    ],
    'pms_transformation_de_template' => [
      'template' => 'page--pms-transformation-page-de-template',
      'base hook' => 'node',
    ],
    'pms_transformation_fr_template' => [
      'template' => 'page--pms-transformation-page-fr-template',
      'base hook' => 'node',
    ],
    'pms_transformation_template' => [
      'template' => 'page--pms-transformation-page-template',
      'base hook' => 'node',
    ],
    'node__blog-single-page' => [
      'template' => 'node--blog-single-page',
      'base hook' => 'node',
    ],
    'node__press-front-page' => [
      'template' => 'node--press-front-page',
      'base hook' => 'node',
    ],
    'node__ebook-front-page' => [
      'template' => 'node--ebook-front-page',
      'base hook' => 'node',
    ],
    'node__press-archive-single-page' => [
      'template' => 'node--press-archive-single-page',
      'base hook' => 'node',
    ],
    'node__resources-page' => [
      'template' => 'node--resources-page',
      'base hook' => 'node',
    ],
    'node__news-page' => [
      'template' => 'node--news-page',
      'base hook' => 'node',
    ],
    'node__ebook-single-page' => [
      'template' => 'node--ebook-single-page',
      'base hook' => 'node',
    ],
    'views_view_field__ebook_link' => [
      'template' => 'views-view-field--ebook-link',
      'base hook' => 'views_view_field',
    ],
    'node__homepage_v1_it' => [
      'template' => 'node--homepage-it',
      'base hook' => 'node',
    ],
    'node__homepage_v1_es' => [
      'template' => 'node--homepage-es',
      'base hook' => 'node',
    ],
    'node__homepage_v1_de' => [
      'template' => 'node--homepage-de',
      'base hook' => 'node',
    ],
    'node__homepage_v1_fr' => [
      'template' => 'node--homepage-fr',
      'base hook' => 'node',
    ],
    'node__homepage_v1' => [
      'template' => 'node--homepage',
      'base hook' => 'node',
    ],
    'node__homepage_v2_it' => [
      'template' => 'node--homepage-v2-it',
      'base hook' => 'node',
    ],
    'node__homepage_v2_fr' => [
      'template' => 'node--homepage-v2-fr',
      'base hook' => 'node',
    ],
    'node__homepage_v2_es' => [
      'template' => 'node--homepage-v2-es',
      'base hook' => 'node',
    ],
    'node__homepage_v2_de' => [
      'template' => 'node--homepage-v2-de',
      'base hook' => 'node',
    ],
    'node__homepage_v2' => [
      'template' => 'node--homepage-v2',
      'base hook' => 'node',
    ],
    'node__basic_page' => [
      'template' => 'node--basic-page',
      'base hook' => 'node',
    ],
    'paragraph__hero__default' => [
      'base hook' => 'paragraph',
      'template' => 'paragraph--hero--default',
      'path' => $path . '/templates/paragraph',  
   ]
   ];
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function planet_core_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node || !($node instanceof \Drupal\node\NodeInterface)) {
    return;
  }
  $config = \Drupal::config('planet_core.settings');
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

  // News page suggestions
  if ($node->id() == SpecialTemplates::PRESS_FRONT) {
    $suggestions[] = 'node__press-front-page';
    return;
  } else if ($node->id() == SpecialTemplates::PRESS_ARCHIVE) {
    $suggestions[] = 'node__press-archive-single-page';
    return;
  } else if ($node->id() == SpecialTemplates::EBOOKS) {
    $suggestions[] = 'node__ebook-front-page';
    return;
  } else {
    switch ($alias) {
      case "/blog":
        $suggestions[] = 'node__blog-single-page';
        return;
      case "/sitemap":
        $suggestions[] = 'node__sitemap';
        return;
    }
  }

  // Homepage v1 suggestions
  if ($alias == "/new") {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    switch ($language) {
      case "it":
        $suggestions[] = 'node__homepage_v1_it';
        break;
      case "es":
        $suggestions[] = 'node__homepage_v1_es';
        break;
      case "de":
        $suggestions[] = 'node__homepage_v1_de';
        break;
      case "fr":
        $suggestions[] = 'node__homepage_v1_fr';
        break;
      default:
        $suggestions[] = 'node__homepage_v1';
    }
    return;
  }

  // Homepage v2 suggestions  
  if ($alias == "/homepage-prototype-v2") {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    switch ($language) {
      case "it":
        $suggestions[] = 'node__homepage_v2_it';
        break;
      case "es":
        $suggestions[] = 'node__homepage_v2_es';
        break;
      case "de":
        $suggestions[] = 'node__homepage_v2_de';
        break;
      case "fr":
        $suggestions[] = 'node__homepage_v2_fr';
        break;
      default:
        $suggestions[] = 'node__homepage_v2';
    }
    return;
  }

  // PMS transformation suggestions
  if ($alias == "/pms-transformation") {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    switch ($language) {
      case "fr":
        $suggestions[] = 'pms_transformation_fr_template';
        break;
      case "de":
        $suggestions[] = 'pms_transformation_de_template';
        break;
      default:
        $suggestions[] = 'pms_transformation_template';
    }
    return;
  }

  if ($node->getType() === 'resources') {
    $suggestions[] = 'node__resources-page';
  }

  if ($node->getType() === 'newsroom') {
    $suggestions[] = 'node__news-page';
  }

  if ($node->getType() === 'e_book_') {
    $suggestions[] = 'node__ebook-single-page';
  }

  if ($node->getType() === "page" && !in_array($node->id(), SpecialTemplates::getAll())) {
    $suggestions[] = 'node__basic_page';
  }


}

/**
 * Implements hook_entity_insert().
 */
function planet_core_entity_insert(EntityInterface $entity): void
{
  _planet_core_update_untranslated_path($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function planet_core_entity_update(EntityInterface $entity): void
{
  _planet_core_update_untranslated_path($entity, 'update');
}

/**
 * Trigger pathauto for untranslated content.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 * @param string $action
 *   The action performed in the entity.
 */
function _planet_core_update_untranslated_path(EntityInterface $entity, string $action): void
{
  $pathautoGenerator = \Drupal::service('pathauto.generator');

  // Check if entity has pathauto enabled and is translatable.
  if (!$pathautoGenerator->getPatternByEntity($entity) || !($entity instanceof TranslatableInterface)) {
    return;
  }

  $translatedLanguages = $entity->getTranslationLanguages();
  $allLanguages = \Drupal::languageManager()->getLanguages();
  $untranslatedLanguages = array_diff_key($allLanguages, $translatedLanguages);

  foreach ($untranslatedLanguages as $langcode => $language) {
    $translation = $entity->addTranslation($langcode, $entity->toArray());
    $pathautoGenerator->updateEntityAlias($translation, $action);
  }
}

/**
 * Fix "Non-translatable fields can only be changed when updating the original
 * language." issue.
 *
 * Implements hook_entity_type_alter().
 */
function planet_core_entity_type_alter(array &$entity_types)
{
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_cloned_node_alter().
 */
function planet_core_cloned_node_alter(NodeInterface &$node): void
{
  $configName = 'exclude.node.' . $node->getType();
  $excludeFields = \Drupal::config('quick_node_clone.settings')->get($configName);
  $excludeFields = $excludeFields ?: [];

  foreach ($node->getFieldDefinitions() as $fieldDefinition) {
    $fieldStorageDefinition = $fieldDefinition->getFieldStorageDefinition();
    $fieldSettings = $fieldStorageDefinition->getSettings();
    $fieldName = $fieldStorageDefinition->getName();

    if (!in_array($fieldName, $excludeFields)) {
      if (isset($fieldSettings['target_type']) && $fieldSettings['target_type'] != "paragraph") {
        $field = $node->get($fieldName);
        if (!$field->isEmpty()) {
          if ($field instanceof EntityReferenceRevisionsFieldItemList) {
            foreach ($field as $value) {
              if ($value->entity) {
                $value->entity = $value->entity->createDuplicate();
              }
            }
          }
        }
      }
    }
  }
}


/**
 * Assign js files and send data.
 *
 * Implements hook_preprocess_HOOK().
 *
 * Assign js files and send data
 *
 */
function planet_core_preprocess_node(array &$variables)
{
  $node = $variables['node'];
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

  $planet_core_article_helper = \Drupal::service('planet_core.article_helper');
  $planet_core_news_helper = \Drupal::service('planet_core.news_helper');
  $planet_core_ebooks_helper = \Drupal::service('planet_core.ebooks_helper');

  $variables['#attached']['library'][] = 'planet_core/language-popup';

  if ($alias === '/sitemap') {
    $variables['term_tree'] = \Drupal::service('planet_html_sitemap.helper')
      ->buildTree();
    $variables['#attached']['library'][] = 'planet_html_sitemap/planet_html_sitemap';
  }

  if ($node->getType() == 'author') {
    $variables['#attached']['library'][] = 'planet_core/author-page';
  }

  if (in_array($node->getType(), ["resources", "newsroom"])) {
    $variables['#attached']['library'][] = 'planet_core/single-article-page';
  }

  if ($node->getType() == 'resources') {
    $variables['article'] = $planet_core_article_helper->getSingleArticleData($node->id());
  }

  if ($node->getType() == 'newsroom') {
    $variables['article'] = $planet_core_news_helper->getSingleNewsData($node->id());
  }

  if ($alias == "/blog") {
    $variables['featured_article'] = $planet_core_article_helper->getLastPublishedArticle();
    $variables['useful_links'] = $planet_core_article_helper->getToggleLinks();
    $variables['tags'] = $planet_core_article_helper->getAllBlogArticleTags();
    $variables['#attached']['library'][] = 'planet_core/blog-page';
  }
  if ($node->id() == SpecialTemplates::PRESS_ARCHIVE) { //news-archive
    $variables['tags'] = $planet_core_news_helper->getAllNewsArticleTags();
    $variables['years'] = $planet_core_news_helper->getYears();
    $variables['useful_links'] = $planet_core_article_helper->getToggleLinks();
    $variables['#attached']['library'][] = 'planet_core/news-page';
  }

  // Check for specific node ID instead of alias.
  if ($node->id() == SpecialTemplates::PRESS_FRONT) {
    $variables['featured_article'] = $planet_core_news_helper->getLastPublishedNews();
    $variables['tags'] = $planet_core_news_helper->getAllNewsArticleTags();
    $variables['useful_links'] = $planet_core_article_helper->getToggleLinks();
    $variables['articles'] = $planet_core_news_helper->getPublishedNews(3, 0, "en", false, false, false);
    $variables['external_articles'] = $planet_core_news_helper->getPublishedNews(3, 0, "en", true, false);
  }

  if ($node->id() == SpecialTemplates::EBOOKS) { //news
    $variables['featured_article'] = $planet_core_ebooks_helper->getLastPublishedEbook();
    $variables['articles'] = $planet_core_ebooks_helper->getPublishedEbooks();
  }

  if ($node->getType() == 'page' && !in_array($node->id(), SpecialTemplates::getAll())) {
    if(!$node->get('field_webform')->isEmpty()) {

    $webform_id = $node->get('field_webform')->target_id;
      $form = \Drupal::entityTypeManager()
          ->getStorage('webform')
          ->load($webform_id)
          ->getSubmissionForm();
          $webform_html = $node->get('field_webform_text')->value;

          // Pass both form and webform_html to variables
          $variables['form'] = $form;
          $variables['webform_html'] = $webform_html;
    }
  }

  if ($node->getType() == 'e_book_') {
    if(!$node->get('field_ebook_form')->isEmpty()) {
    $webform_id = $node->get('field_ebook_form')->target_id;
    $form = \Drupal::entityTypeManager()
        ->getStorage('webform')
        ->load($webform_id)
        ->getSubmissionForm();
    $variables['form'] = $form;
    }

    if (!$node->get('field_main_image_media')->isEmpty()) {
      $media = $node->get('field_main_image_media')->entity;
      if ($media) {
        $image_field = $media->get('field_media_image');
        if (!$image_field->isEmpty()) {
          $file = $image_field->entity;
          $variables['image_url'] = $file->createFileUrl();
          // Or if you want to use a specific image style:
          // $variables['image_url'] = ImageStyle::load('your_style')->buildUrl($file->getFileUri());
        }
      }
    }
}

}

/**
 * Implements hook_preprocess_HOOK().
 */
function planet_core_preprocess_page(array &$variables)
{
  $variables['#attached']['library'][] = 'planet_core/language-popup';
  $variables['#attached']['library'][] = 'planet_core/sitewide-libraries';

  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  if ($current_path_alias === '/pms-transformation') {
    $variables['#attached']['library'][] = 'planet_core/pms-transformation';
  }
}


function planet_core_page_attachments_alter(array &$attachments)
{
  $current_path = \Drupal::service('path.current')->getPath();
  $alias_manager = \Drupal::service('path_alias.manager');
  $current_alias = $alias_manager->getAliasByPath($current_path);

  if ($current_alias == '/new' || $current_alias == '/homepage-prototype-v2') {
    // Tailwind enabled flag.
    $tailwind_enabled = false;
    $attachments['#attached']['library'][] = 'planet_core/front-page';

    if ($tailwind_enabled) {
      // Attach the specific libraries and scripts only on the front page.
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'script',
          '#attributes' => [
            'src' => 'https://cdn.tailwindcss.com',
          ],
        ],
        'tailwindcdn',
      ];
    }
  }
}
