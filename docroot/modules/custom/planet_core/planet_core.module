<?php

/**
 * @file
 * Custom hooks functions for Planet Core.
 */

use Drupal\webform\WebformSubmissionInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\TranslatableInterface;
use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;

include_once(drupal_get_path('module', 'planet_core') . '/planet_core.utils.inc');

/** Debug function */
// function printtf($content) {
//   $myfile = fopen("./debug.txt", "a") or die("Unable to open file!");
//   $txt = var_export($content, true);
//   fwrite($myfile, "\n". $txt);
//   fclose($myfile);
// }

/**
 * Sanitize cookie.
 */
function _planet_core_sanitize_cookie($value)
{
  return htmlspecialchars($value);
}


/**
 * Implements hook_preprocess_html().
 *
 * Changes the title of the user page.
 */
function planet_core_preprocess_html(&$variables): void
{
  $routeName = \Drupal::routeMatch()->getRouteName();
  if ($routeName === 'entity.user.canonical') {
    $variables['head_title']['title'] = '';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function planet_core_webform_submission_presave(WebformSubmissionInterface $webform_submission): void
{

  $webform = $webform_submission->getWebform();
  $webform_id = $webform->id();

  // Check for the variables to send the UTMs to the form.
  $cookie_utm_source = isset($_COOKIE['Drupal_visitor_utm_source']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_source']) : '';
  $cookie_utm_medium = isset($_COOKIE['Drupal_visitor_utm_medium']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_medium']) : '';
  $cookie_utm_campaign = isset($_COOKIE['Drupal_visitor_utm_campaign']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_campaign']) : '';
  $cookie_utm_term = isset($_COOKIE['Drupal_visitor_utm_term']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_term']) : '';
  $cookie_utm_content = isset($_COOKIE['Drupal_visitor_utm_content']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_utm_content']) : '';

  $cookie_orig_utm_source = isset($_COOKIE['Drupal_visitor_orig_utm_source']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_source']) : '';
  $cookie_orig_utm_medium = isset($_COOKIE['Drupal_visitor_orig_utm_medium']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_medium']) : '';
  $cookie_orig_utm_campaign = isset($_COOKIE['Drupal_visitor_orig_utm_campaign']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_campaign']) : '';
  $cookie_orig_utm_term = isset($_COOKIE['Drupal_visitor_orig_utm_term']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_term']) : '';
  $cookie_orig_utm_content = isset($_COOKIE['Drupal_visitor_orig_utm_content']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_utm_content']) : '';

  $cookie_gclid = isset($_COOKIE['Drupal_visitor_gclid']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_gclid']) : '';
  $cookie_referrer = isset($_COOKIE['Drupal_visitor_referrer']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_referrer']) : '';
  $cookie_orig_lp = isset($_COOKIE['Drupal_visitor_orig_lp']) ? _planet_core_sanitize_cookie($_COOKIE['Drupal_visitor_orig_lp']) : '';

  if ($cookie_utm_source) {
    $webform_submission->setElementData('utm_source', $cookie_utm_source);
  }

  if ($cookie_utm_medium) {
    $webform_submission->setElementData('utm_medium', $cookie_utm_medium);
  }

  if ($cookie_utm_campaign) {
    $webform_submission->setElementData('utm_campaign', $cookie_utm_campaign);
  }

  if ($cookie_utm_content) {
    $webform_submission->setElementData('utm_content', $cookie_utm_content);
  }

  if ($cookie_utm_term) {
    $webform_submission->setElementData('utm_term', $cookie_utm_term);
  }

  if ($cookie_gclid) {
    $webform_submission->setElementData('gclid', $cookie_gclid);
  }


  if ($cookie_orig_utm_source) {
    $webform_submission->setElementData('orig_utm_source', $cookie_orig_utm_source);
  }

  if ($cookie_orig_utm_medium) {
    $webform_submission->setElementData('orig_utm_medium', $cookie_orig_utm_medium);
  }

  if ($cookie_orig_utm_campaign) {
    $webform_submission->setElementData('orig_utm_campaign', $cookie_orig_utm_campaign);
  }

  if ($cookie_orig_utm_content) {
    $webform_submission->setElementData('orig_utm_content', $cookie_orig_utm_content);
  }

  if ($cookie_orig_utm_term) {
    $webform_submission->setElementData('orig_utm_term', $cookie_orig_utm_term);
  }

  if ($cookie_referrer) {
    $webform_submission->setElementData('referrer', $cookie_referrer);
  }

  if ($cookie_orig_lp) {
    $webform_submission->setElementData('orig_lp', $cookie_orig_lp);
  }


  /** SUPPORT FORM - temporary */
  if ($webform_id === 'support') {
    // Populate the value of 'Support_Address__c' with the same value as 'email'.
    // Need it in order to have Salesforce to send an e-mail.
    $email = $webform_submission->getElementData('email');
    $webform_submission->setElementData('support_address__c', $email);
  }
}


/**
 * Implements hook_form_views_exposed_form_alter().
 *
 * Creates region/country dependent filter.
 */
function planet_core_form_views_exposed_form_alter(&$form, &$form_state): void
{
  if ($form['#id'] === 'views-exposed-form-companies-registered-companies') {
    unset($form['region']['#options']['All']);

    $regions = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('regions');
    if ($region = reset($regions)) {
      $form['region']['#default_value'] = $region->tid;
    }

    $input = $form_state->getUserInput();
    $selectedRegion = $input['region'];
    if ($selectedRegion === 'All') {
      $selectedRegion = array_key_first($form['region']['#options']);
    }

    $countries = _planet_core_get_associative_countries_with_region($selectedRegion);
    $form['country']['#options'] = $countries;

    $form['#attached']['library'][] = 'planet_sitestudio_custom_elements/registeredCompanies';
  }
}

/**
 * Gets countries associated with the region.
 */
function _planet_core_get_associative_countries_with_region(string $regionId): array
{
  $countries = [];
  $countries['All'] = 'All';
  $vid = 'countries';

  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0, NULL, TRUE);
  if ($regionId != 'All') {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => $vid,
      'field_region' => $regionId,
    ]);
  }

  foreach ($terms as $term) {
    $countries[$term->id()] = $term->label();
  }

  return $countries;
}

/**
 * Implements hook_node_access().
 */
function planet_core_node_access(NodeInterface $node, $op, AccountInterface $account)
{
  if ($account->isAnonymous() && $node->gettype() == 'webform') {
    return AccessResult::forbidden()->cachePerPermissions();
  }

  return AccessResult::neutral()->cachePerPermissions();
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function planet_core_preprocess_node__author(&$variables)
{
  // Get the last 5 article titles.
  $node = $variables['node'];

  // Get the NID (node ID) of the Author node.
  $node_id = $node->id();

  $author_data = planet_core_get_author_articles($node_id);

  // Pass the titles to the template.
  $variables['author_data'] = $author_data;
}

 /**
 * Implements hook_theme_suggestions_HOOK_alter() to suggest a custom template for a specific node.
 */
function planet_core_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!$node or !($node instanceof \Drupal\node\NodeInterface)) {
    return;
  }

  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

  switch ($alias) {
    case "/customer-resources-tobe":
      $suggestions[] = 'onboarding_page_template';
      break;
  }
}

function planet_core_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node or !($node instanceof \Drupal\node\NodeInterface)) {
    return;
  }
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());
  switch ($alias) {
    case "/blog":
      $suggestions[] = 'node__blog-single-page';
      break;
  }
   if ($node->getType() === 'resources') {
    // Add custom template suggestion for 'resources' content type.
    $suggestions[] = 'node__resources-page';
  }
}

/**
 * Implements hook_theme().
 */
function planet_core_theme(): array
{
  return [
    'views_view_fields__case_studies__featured_slider' => [
      'template' => 'views-view-fields--case-studies--featured-slider',
      'render element' => 'elements',
      'base hook' => 'views_view',
    ],
    'views_view_fields__case_studies__featured_block' => [
      'template' => 'views-view-fields--case-studies--featured-block',
      'render element' => 'elements',
      'base hook' => 'views_view',
    ],
    'paragraph__right_side_mega_menu' => [
      'template' => 'paragraph--right-side-mega-menu',
      'base hook' => 'paragraph',
    ],
    'node__author' => [
      'template' => 'node--author',
      'base hook' => 'node'
    ],
    'onboarding_page_template' => [
      'template' => 'page--onboarding-page-template',
      'base hook' => 'page',
    ],
    'node__blog-single-page' => [
      'template' => 'node--blog-single-page',
      'base hook' => 'node',
    ],
    'node__resources-page' => [
      'template' => 'node--resources-page',
      'base hook' => 'node',
    ]
  ];
}

/**
 * Implements hook_entity_insert().
 */
function planet_core_entity_insert(EntityInterface $entity): void
{
  _planet_core_update_untranslated_path($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function planet_core_entity_update(EntityInterface $entity): void
{
  _planet_core_update_untranslated_path($entity, 'update');
}

/**
 * Trigger pathauto for untranslated content.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 * @param string $action
 *   The action performed in the entity.
 */
function _planet_core_update_untranslated_path(EntityInterface $entity, string $action): void
{
  $pathautoGenerator = \Drupal::service('pathauto.generator');

  // Check if entity has pathauto enabled and is translatable.
  if (!$pathautoGenerator->getPatternByEntity($entity) || !($entity instanceof TranslatableInterface)) {
    return;
  }

  $translatedLanguages = $entity->getTranslationLanguages();
  $allLanguages = \Drupal::languageManager()->getLanguages();
  $untranslatedLanguages = array_diff_key($allLanguages, $translatedLanguages);

  foreach ($untranslatedLanguages as $langcode => $language) {
    $translation = $entity->addTranslation($langcode, $entity->toArray());
    $pathautoGenerator->updateEntityAlias($translation, $action);
  }
}

/**
 * Fix "Non-translatable fields can only be changed when updating the original
 * language." issue.
 */
function planet_core_entity_type_alter(array &$entity_types)
{
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_cloned_node_alter().
 */
function planet_core_cloned_node_alter(NodeInterface &$node): void
{
  $configName = 'exclude.node.' . $node->getType();
  $excludeFields = \Drupal::config('quick_node_clone.settings')->get($configName);
  $excludeFields = $excludeFields ?: [];

  foreach ($node->getFieldDefinitions() as $fieldDefinition) {
    $fieldStorageDefinition = $fieldDefinition->getFieldStorageDefinition();
    $fieldSettings = $fieldStorageDefinition->getSettings();
    $fieldName = $fieldStorageDefinition->getName();

    if (!in_array($fieldName, $excludeFields)) {
      if (isset($fieldSettings['target_type']) && $fieldSettings['target_type'] != "paragraph") {
        $field = $node->get($fieldName);
        if (!$field->isEmpty()) {
          if ($field instanceof EntityReferenceRevisionsFieldItemList) {
            foreach ($field as $value) {
              if ($value->entity) {
                $value->entity = $value->entity->createDuplicate();
              }
            }
          }
        }
      }
    }
  }
}


/**
 * Assign js files and send data
 * 
 */
function planet_core_preprocess_node(array &$variables)
{
  $node = $variables['node'];
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

  $variables['#attached']['library'][] = 'planet_core/language-popup';

  if ($node->getType() == 'author') {
    $variables['#attached']['library'][] = 'planet_core/author-page';
  }

  if ($node->getType() == 'resources') {
    $variables['article'] = planet_core_single_article($node->id());
    $variables['#attached']['library'][] = 'planet_core/single-article-page';
  }

  if ($alias == "/blog") {
    $variables['featured_article'] = planet_core_get_last_published_article();
    $variables['#attached']['library'][] = 'planet_core/blog-page';
  }
}


