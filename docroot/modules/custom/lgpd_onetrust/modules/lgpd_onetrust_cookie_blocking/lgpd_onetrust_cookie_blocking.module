<?php

/**
 * @file
 * This module intends to enable/disable the cookies based on the user consent.
 */

use Drupal\lgpd_onetrust_cookie_blocking\LgpdBlockjs;

define('LGPD_ONETRUST_COOKIE_BLOCKING_PERFORMANCE', 2);
define('LGPD_ONETRUST_COOKIE_BLOCKING_FUNCTIONAL', 3);
define('LGPD_ONETRUST_COOKIE_BLOCKING_TARGETTING', 4);
define('LGPD_ONETRUST_COOKIE_BLOCKING_MEDIA', 8);

/**
 * Implements hook_page_attachments().
 */
function lgpd_onetrust_cookie_blocking_page_attachments(array &$attachments) {
  global $base_root;
  $base_domain = explode("://", $base_root);
  $attachments['#attached']['library'][] = 'lgpd_onetrust_cookie_blocking/cookie-blocking';
  $attachments['#attached']['drupalSettings']['lgpd_onetrust_cookie_blocking']['base_domain'] = $base_domain[1];
}

/**
 * Implements hook_js_alter().
 */
function lgpd_onetrust_cookie_blocking_get_js_path() {
  $lgpd_cookie_config = \Drupal::config('lgpd_onetrust_cookie_blocking.settings');
  return $lgpd_cookie_config->get('external_js_cookie');
}

/**
 * Implements hook_js_alter().
 */
function lgpd_onetrust_cookie_blocking_js_alter(&$js, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $lgpd = LgpdBlockjs::instance();
  if ($lgpd->isLgpdScope() === TRUE) {
    //lgpd_onetrust_cookie_blocking_filter_cookiejs($js, TRUE);
    $blocking_js_files = lgpd_onetrust_cookie_blocking_get_js_path();
    if ($blocking_js_files != '') {
      $block_js_array = explode(PHP_EOL, $blocking_js_files);
      foreach ($block_js_array as $value) {
        $block_sep = explode('|', $value);
        $js_file = trim($block_sep[0]);
        $cookie_category = trim($block_sep[1]);
        if (isset($js[$js_file])) {
          onetrust_cookie_blocking_lgpd_scopeing($js[$js_file], $cookie_category);
        }
      }
    }
  }
}

/**
 * Modify the JS scope and update the config data to insertscript.
 */
function lgpd_onetrust_cookie_blocking_filter_cookiejs(&$site_js, $exclude_add = FALSE) {
  module_load_include('inc', 'lgpd_onetrust_cookie_blocking', 'lgpd_onetrust_cookie_blocking_js_list');
  $cookie_js_list = lgpd_cookie_js_path();
  $obj = LgpdBlockjs::instance();
  foreach ($cookie_js_list as $cookie_js_key => $cookie_js_array) {
    foreach ($cookie_js_array as $cookie_js) {
      if (isset($site_js[$cookie_js])) {
        onetrust_cookie_blocking_lgpd_scopeing($site_js[$cookie_js], $cookie_js_key);
        if ($exclude_add === FALSE) {
          $obj->generateOptanons($site_js[$cookie_js]);
        }
      }
    }
  }
}

/**
 * Update the JS scope variable to access from OneTrust API.
 */
function onetrust_cookie_blocking_lgpd_scopeing(&$js, $cookie_category) {
  $js['lgpd_onetrust']['group'] = $cookie_category;
  $js['lgpd_onetrust']['scope'] = $js['scope'];
  $js['scope'] = 'lgpd_onetrust';
}

/**
 * Implements hook_page_attachments_alter().
 */
function lgpd_onetrust_cookie_blocking_page_attachments_alter(array &$attachments) {
  $gajs = [];
  $lgpd = LgpdBlockjs::instance();
  if ($lgpd->isLgpdScope() === TRUE) {
    if (\Drupal::moduleHandler()->moduleExists('google_analytics')) {
      foreach ($attachments['#attached']['html_head'] as $key => $htmlhead) {
        if (is_array($htmlhead) && isset($htmlhead[0]['#value']) && preg_match("/GoogleAnalyticsObject/", $htmlhead[0]['#value'], $matches)) {
          preg_match("/^\(function.*/", $htmlhead[0]['#value'], $ga_match);
          $ga_js = '/ga.js';
          $ga_file_path = \Drupal::service('file_system')->realpath(Drupal::config('system.file')->get('default_scheme') . "://") . $ga_js;

          $filepath = $ga_file_path;
          lgpd_onetrust_cookie_blocking_create_gajs($filepath, $ga_match[0]);
          $base_wrapper = \Drupal::service('stream_wrapper_manager')->getViaScheme(Drupal::config('system.file')->get('default_scheme'));
          $ga_js_path = $base_wrapper::baseUrl() . $ga_js;

          // Attach the GA file to the OneTrust API.
          $gajs[$ga_js_path]['data'] = $ga_js_path;
          $gajs[$ga_js_path]['lgpd_onetrust']['group'] = LGPD_ONETRUST_COOKIE_BLOCKING_PERFORMANCE;
          unset($attachments['#attached']['html_head'][$key]);
        }
      }
    }

    $blocking_js_files = lgpd_onetrust_cookie_blocking_get_js_path();
    if ($blocking_js_files != '') {
      $block_js_array = explode(PHP_EOL, $blocking_js_files);
      foreach ($block_js_array as $value) {
        $block_sep = explode('|', $value);
        $js_file = trim($block_sep[0]);

        $gajs[$js_file]['data'] = $js_file;
        $gajs[$js_file]['lgpd_onetrust']['group'] = trim($block_sep[1]);

      }
    }
    if(is_array($gajs)){
      $lgpd->generateOptanons($gajs);
    }
    $attachments['#attached']['library'][] = 'lgpd_onetrust_cookie_blocking/cookie-blocking';
	$lgpd_config = \Drupal::config('lgpd_onetrust.settings');
    $lgpd_onetrust_version = $lgpd_config->get('lgpd_onetrust_version');
    $attachments['#attached']['drupalSettings']['lgpd_onetrust_cookie_blocking']['lgpd_onetrust_version'] = $lgpd_onetrust_version;
    $attachments['#attached']['drupalSettings']['lgpd_onetrust_cookie_blocking']['insertscript'] = $lgpd->optanoPublishScript();
    $attachments['#attached']['drupalSettings']['lgpd_onetrust_cookie_blocking']['inserthtml'] = $lgpd->optanoPublishHtml();
  }
}


/**
 * Verify the file permissions and create/update the file.
 */
function lgpd_onetrust_cookie_blocking_create_gajs($filepath, $data) {
  if (file_exists($filepath) && !is_writable($filepath)) {
    chmod($filepath, 0777);
  }

  if (!file_exists($filepath) || filesize($filepath) === 0) {
    $fp = fopen($filepath, 'w');
    fwrite($fp, $data);
    fclose($fp);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view to pass iframes to Optanon.InsertHTML
 */
function lgpd_onetrust_cookie_blocking_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if(isset($build['body'][0]['#text'])) {
    $build['body'][0]['#text'] = lgpd_onetrust_cookie_blocking_iframes($build['body'][0]['#text']);
  }
}

/**
 * Implements iframe remidiation on page load.
 * The iframes triggering cookies needs to be wrapped in a div with id,
 * This id and the iframe will be passed to optanon.Inserthtml() Onetrust function to control based on user consent.
 */
function lgpd_onetrust_cookie_blocking_iframes($content) {
  $lgpd_config = \Drupal::config('lgpd_onetrust.settings');
  $lgpd_onetrust_version = $lgpd_config->get('lgpd_onetrust_version') == NULL ? 1 : $lgpd_config->get('lgpd_onetrust_version');
  $lgpd = LgpdBlockjs::instance();
  $youtube_domains_list = array('www.youtube.com');
  $marker_list = array('youtube', 'socialpollencount');
  if (preg_match_all('#<iframe\s+.*?\s+src=(".*?").*?<\/iframe>#', $content, $matches) !== FALSE) {
    foreach ($marker_list as $marker) {
      foreach ($matches[0] as $key => $iframes) {
        if (strstr($iframes, $marker) !== FALSE) {
          if ($lgpd_onetrust_version == 2) {
            $content = str_ireplace($youtube_domains_list, 'www.youtube-nocookie.com', $content);
          }
          if (($marker != 'youtube' && $lgpd_onetrust_version == 2) || $lgpd_onetrust_version == 1) {
            $cookie_category = $lgpd_onetrust_version == 2 ? LGPD_ONETRUST_COOKIE_BLOCKING_TARGETTING : LGPD_ONETRUST_COOKIE_BLOCKING_MEDIA;
            $media_id = 'media_id_' . rand();
            $content = str_replace($iframes, '<div id="' . $media_id . '"></div>', $content);
            $iframes = str_replace(array("\n", "\r"), '', $iframes);
            $lgpd->optanonInserthtml($iframes, $media_id, $cookie_category);
          }
        }
      }
    }
  }
  return $content;
}
