<?php

/**
 * @file
 * Custom hooks functions for the planet_language_switcher module.
 */
function planet_language_switcher_get_author_articles($authorId) {
  
  $author_node = \Drupal\node\Entity\Node::load($authorId);
  $author_name = $author_node->getTitle();
  $author_name_words = explode(' ', $author_name);

  // Extract the first word only if the author's name has at least two words.
  $first_word = (count($author_name_words) >= 2) ? reset($author_name_words) : $author_name;

  $profile_picture_url = '';
  // Check if the author node and profile picture field exist.
  if ($author_node && $author_node->hasField('field_profile_picture')) {
    $profile_picture_media = $author_node->get('field_profile_picture')->entity;
    if ($profile_picture_media instanceof \Drupal\media\Entity\Media) {
      $profile_picture_file = $profile_picture_media->get('field_media_image')->entity;
      if ($profile_picture_file instanceof \Drupal\file\Entity\File) {
        $profile_picture_url = file_create_url($profile_picture_file->getFileUri());
      }
    }
  }

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'resources') // Adjust to your content type name.
    ->condition('field_author.target_id', $authorId)
    ->sort('created', 'DESC'); // Sort by creation date in descending order.

  $resource_nids = $query->execute();
  $resource_nodes = \Drupal\node\Entity\Node::loadMultiple($resource_nids);

  $articles = [];
  $unique_tags = []; // Initialize an array to store unique tags.

  foreach ($resource_nodes as $node) {
    $title = $node->getTitle();
    $url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());
    
    // Get Tags (field_resources_tags)
    $tags_references = $node->get('field_resources_tags')->referencedEntities();
    $article_tags = [];
    
    
    foreach ($tags_references as $tag) {
      $tag_name = $tag->getName();
      $tag_id = $tag->id(); // Get the tag ID.
      
      // Add the tag to the unique_tags array if it doesn't exist.
      if (!in_array($tag_id, array_column($unique_tags, 'id'))) {
        $unique_tags[] = [
          'name' => $tag_name,
          'id' => $tag_id,
        ];
      }

      // Add the tag to the article_tags array.
      $article_tags[] = [
        'name' => $tag_name,
        'id' => $tag_id,
      ];
    }

    
    // Get Background Image (field_resources_background_image)
    $background_image_media = $node->get('field_resources_background_image')->entity;
    if ($background_image_media instanceof \Drupal\media\Entity\Media) {
      $background_image_file = $background_image_media->get('field_media_image')->entity;
      if ($background_image_file instanceof \Drupal\file\Entity\File) {
        $background_image_url = file_create_url($background_image_file->getFileUri());
      }
    }

    // Get Creation Date
    $creation_timestamp = $node->getCreatedTime();
    $creation_date = date('F j, Y', $creation_timestamp);


    $articles[] = [
      'url' => $url,
      'title' => $title,
      'tags' => $article_tags, // Store the tags for the current article.
      'background_image' => $background_image_url,
      'creation_date' => $creation_date,
    ];
  }

  return [
    'tags' => $unique_tags,
    'articles' => $articles,
    'author' => array(
        'profile_picture' => $profile_picture_url,
        'first_name' => $first_word,
        'full_name' => $author_name
    )
  ];
}

function planet_language_switcher_preprocess_html(&$variables) {
  /** Where to display the transparent header */
  $allowed_pages = [
    "author"
  ];
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node && in_array($node->bundle(), $allowed_pages)) {
    $variables['attributes']['class'][] = "planet-header-transparent";
  }
  
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function planet_language_switcher_preprocess_node__author(&$variables) {
  // Get the last 5 article titles.
  $node = $variables['node'];

  // Get the NID (node ID) of the Author node.
  $node_id = $node->id();

  $author_data = planet_language_switcher_get_author_articles($node_id);

  // Pass the titles to the template.
  $variables['author_data'] = $author_data;
}
/**
 * Implements hook_theme().
 */
function planet_language_switcher_theme() {
  return [
    'language_switcher' => [
      'variables' => ['data' => []],
    ],
    'node__author' => [
      'template' => 'node--author',
      'base hook' => 'node'
    ],
    'onboarding_page_template' => [
      'variables' => ['content' => NULL],
      'template' => 'page--onboarding-page-template',
      'base hook' => 'page',
    ],
  ];
}

// function log_to_file($text)
// {
//   $f = fopen('my_log.txt', 'a');
//   fwrite($f, date('Ymd H:i:s - ') . $text . "\n");
//   fclose($f);
// }

/**
 * Implements hook_theme_suggestions_HOOK_alter() to suggest a custom template for a specific node.
 */
function planet_language_switcher_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if(!$node) {
    return;
  }
  
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$node->id());

  /** Onboarding page tempalte */
  if ($node instanceof \Drupal\node\NodeInterface && $alias == "/getting-started") {
    $suggestions[] = 'onboarding_page_template';
  }
}